// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.21.9
// source: s3_service.proto

package s3_service

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RequestResult int32

const (
	RequestResult_UNKNOWN_RESULT RequestResult = 0
	// Request has been rejected
	RequestResult_REJECTED RequestResult = 1
	// Request has been accepted for processing
	RequestResult_ACCEPTED RequestResult = 2
)

// Enum value maps for RequestResult.
var (
	RequestResult_name = map[int32]string{
		0: "UNKNOWN_RESULT",
		1: "REJECTED",
		2: "ACCEPTED",
	}
	RequestResult_value = map[string]int32{
		"UNKNOWN_RESULT": 0,
		"REJECTED":       1,
		"ACCEPTED":       2,
	}
)

func (x RequestResult) Enum() *RequestResult {
	p := new(RequestResult)
	*p = x
	return p
}

func (x RequestResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestResult) Descriptor() protoreflect.EnumDescriptor {
	return file_s3_service_proto_enumTypes[0].Descriptor()
}

func (RequestResult) Type() protoreflect.EnumType {
	return &file_s3_service_proto_enumTypes[0]
}

func (x RequestResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestResult.Descriptor instead.
func (RequestResult) EnumDescriptor() ([]byte, []int) {
	return file_s3_service_proto_rawDescGZIP(), []int{0}
}

type ErrorRetryStatus int32

const (
	// none so user to decide to take further action
	ErrorRetryStatus_NONE ErrorRetryStatus = 0
	// Request can be re-tried
	ErrorRetryStatus_RETRY ErrorRetryStatus = 1
	// Request cannot be re-tried
	ErrorRetryStatus_NO_RETRY ErrorRetryStatus = 2
	// Wait and retry Request
	ErrorRetryStatus_WAIT_AND_RETRY ErrorRetryStatus = 3
)

// Enum value maps for ErrorRetryStatus.
var (
	ErrorRetryStatus_name = map[int32]string{
		0: "NONE",
		1: "RETRY",
		2: "NO_RETRY",
		3: "WAIT_AND_RETRY",
	}
	ErrorRetryStatus_value = map[string]int32{
		"NONE":           0,
		"RETRY":          1,
		"NO_RETRY":       2,
		"WAIT_AND_RETRY": 3,
	}
)

func (x ErrorRetryStatus) Enum() *ErrorRetryStatus {
	p := new(ErrorRetryStatus)
	*p = x
	return p
}

func (x ErrorRetryStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorRetryStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_s3_service_proto_enumTypes[1].Descriptor()
}

func (ErrorRetryStatus) Type() protoreflect.EnumType {
	return &file_s3_service_proto_enumTypes[1]
}

func (x ErrorRetryStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorRetryStatus.Descriptor instead.
func (ErrorRetryStatus) EnumDescriptor() ([]byte, []int) {
	return file_s3_service_proto_rawDescGZIP(), []int{1}
}

type ComparisonOperator int32

const (
	ComparisonOperator_COMPARISON_UNKNOWN ComparisonOperator = 0
	ComparisonOperator_CONTAINS           ComparisonOperator = 1
	// STRING contains.Case Insensitive. May not be supported for all data types
	ComparisonOperator_ICONTAINS             ComparisonOperator = 2
	ComparisonOperator_EQUAL                 ComparisonOperator = 3
	ComparisonOperator_LESS_THAN             ComparisonOperator = 4
	ComparisonOperator_LESS_THAN_OR_EQUAL    ComparisonOperator = 5
	ComparisonOperator_GREATER_THAN          ComparisonOperator = 6
	ComparisonOperator_GREATER_THAN_OR_EQUAL ComparisonOperator = 7
)

// Enum value maps for ComparisonOperator.
var (
	ComparisonOperator_name = map[int32]string{
		0: "COMPARISON_UNKNOWN",
		1: "CONTAINS",
		2: "ICONTAINS",
		3: "EQUAL",
		4: "LESS_THAN",
		5: "LESS_THAN_OR_EQUAL",
		6: "GREATER_THAN",
		7: "GREATER_THAN_OR_EQUAL",
	}
	ComparisonOperator_value = map[string]int32{
		"COMPARISON_UNKNOWN":    0,
		"CONTAINS":              1,
		"ICONTAINS":             2,
		"EQUAL":                 3,
		"LESS_THAN":             4,
		"LESS_THAN_OR_EQUAL":    5,
		"GREATER_THAN":          6,
		"GREATER_THAN_OR_EQUAL": 7,
	}
)

func (x ComparisonOperator) Enum() *ComparisonOperator {
	p := new(ComparisonOperator)
	*p = x
	return p
}

func (x ComparisonOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComparisonOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_s3_service_proto_enumTypes[2].Descriptor()
}

func (ComparisonOperator) Type() protoreflect.EnumType {
	return &file_s3_service_proto_enumTypes[2]
}

func (x ComparisonOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComparisonOperator.Descriptor instead.
func (ComparisonOperator) EnumDescriptor() ([]byte, []int) {
	return file_s3_service_proto_rawDescGZIP(), []int{2}
}

type LogicalOperator int32

const (
	LogicalOperator_AND LogicalOperator = 0
	LogicalOperator_OR  LogicalOperator = 1
)

// Enum value maps for LogicalOperator.
var (
	LogicalOperator_name = map[int32]string{
		0: "AND",
		1: "OR",
	}
	LogicalOperator_value = map[string]int32{
		"AND": 0,
		"OR":  1,
	}
)

func (x LogicalOperator) Enum() *LogicalOperator {
	p := new(LogicalOperator)
	*p = x
	return p
}

func (x LogicalOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogicalOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_s3_service_proto_enumTypes[3].Descriptor()
}

func (LogicalOperator) Type() protoreflect.EnumType {
	return &file_s3_service_proto_enumTypes[3]
}

func (x LogicalOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogicalOperator.Descriptor instead.
func (LogicalOperator) EnumDescriptor() ([]byte, []int) {
	return file_s3_service_proto_rawDescGZIP(), []int{3}
}

// Enum for the type of presigned operation
type PresignedOperation int32

const (
	PresignedOperation_DOWNLOAD_OPERATION PresignedOperation = 0
	PresignedOperation_UPLOAD_OPERATION   PresignedOperation = 1
)

// Enum value maps for PresignedOperation.
var (
	PresignedOperation_name = map[int32]string{
		0: "DOWNLOAD_OPERATION",
		1: "UPLOAD_OPERATION",
	}
	PresignedOperation_value = map[string]int32{
		"DOWNLOAD_OPERATION": 0,
		"UPLOAD_OPERATION":   1,
	}
)

func (x PresignedOperation) Enum() *PresignedOperation {
	p := new(PresignedOperation)
	*p = x
	return p
}

func (x PresignedOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PresignedOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_s3_service_proto_enumTypes[4].Descriptor()
}

func (PresignedOperation) Type() protoreflect.EnumType {
	return &file_s3_service_proto_enumTypes[4]
}

func (x PresignedOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PresignedOperation.Descriptor instead.
func (PresignedOperation) EnumDescriptor() ([]byte, []int) {
	return file_s3_service_proto_rawDescGZIP(), []int{4}
}

type SortOperator int32

const (
	SortOperator_DEFAULT    SortOperator = 0
	SortOperator_ASCENDING  SortOperator = 1
	SortOperator_DESCENDING SortOperator = 2
)

// Enum value maps for SortOperator.
var (
	SortOperator_name = map[int32]string{
		0: "DEFAULT",
		1: "ASCENDING",
		2: "DESCENDING",
	}
	SortOperator_value = map[string]int32{
		"DEFAULT":    0,
		"ASCENDING":  1,
		"DESCENDING": 2,
	}
)

func (x SortOperator) Enum() *SortOperator {
	p := new(SortOperator)
	*p = x
	return p
}

func (x SortOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_s3_service_proto_enumTypes[5].Descriptor()
}

func (SortOperator) Type() protoreflect.EnumType {
	return &file_s3_service_proto_enumTypes[5]
}

func (x SortOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortOperator.Descriptor instead.
func (SortOperator) EnumDescriptor() ([]byte, []int) {
	return file_s3_service_proto_rawDescGZIP(), []int{5}
}

type JobType int32

const (
	JobType_UPLOAD_IMAGE   JobType = 0
	JobType_DOWNLOAD_IMAGE JobType = 1
)

// Enum value maps for JobType.
var (
	JobType_name = map[int32]string{
		0: "UPLOAD_IMAGE",
		1: "DOWNLOAD_IMAGE",
	}
	JobType_value = map[string]int32{
		"UPLOAD_IMAGE":   0,
		"DOWNLOAD_IMAGE": 1,
	}
)

func (x JobType) Enum() *JobType {
	p := new(JobType)
	*p = x
	return p
}

func (x JobType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobType) Descriptor() protoreflect.EnumDescriptor {
	return file_s3_service_proto_enumTypes[6].Descriptor()
}

func (JobType) Type() protoreflect.EnumType {
	return &file_s3_service_proto_enumTypes[6]
}

func (x JobType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobType.Descriptor instead.
func (JobType) EnumDescriptor() ([]byte, []int) {
	return file_s3_service_proto_rawDescGZIP(), []int{6}
}

// Storage
type DATASTORE int32

const (
	DATASTORE_UNKNOWN_DATASTORE DATASTORE = 0
	DATASTORE_S3                DATASTORE = 1
	DATASTORE_GCS               DATASTORE = 2
	DATASTORE_AZURE_BLOB        DATASTORE = 3
)

// Enum value maps for DATASTORE.
var (
	DATASTORE_name = map[int32]string{
		0: "UNKNOWN_DATASTORE",
		1: "S3",
		2: "GCS",
		3: "AZURE_BLOB",
	}
	DATASTORE_value = map[string]int32{
		"UNKNOWN_DATASTORE": 0,
		"S3":                1,
		"GCS":               2,
		"AZURE_BLOB":        3,
	}
)

func (x DATASTORE) Enum() *DATASTORE {
	p := new(DATASTORE)
	*p = x
	return p
}

func (x DATASTORE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DATASTORE) Descriptor() protoreflect.EnumDescriptor {
	return file_s3_service_proto_enumTypes[7].Descriptor()
}

func (DATASTORE) Type() protoreflect.EnumType {
	return &file_s3_service_proto_enumTypes[7]
}

func (x DATASTORE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DATASTORE.Descriptor instead.
func (DATASTORE) EnumDescriptor() ([]byte, []int) {
	return file_s3_service_proto_rawDescGZIP(), []int{7}
}

// Storage type for setting the storage provider
type DataStorageType int32

const (
	DataStorageType_NONE_STORAGETYPE DataStorageType = 0
	DataStorageType_AWS              DataStorageType = 1
)

// Enum value maps for DataStorageType.
var (
	DataStorageType_name = map[int32]string{
		0: "NONE_STORAGETYPE",
		1: "AWS",
	}
	DataStorageType_value = map[string]int32{
		"NONE_STORAGETYPE": 0,
		"AWS":              1,
	}
)

func (x DataStorageType) Enum() *DataStorageType {
	p := new(DataStorageType)
	*p = x
	return p
}

func (x DataStorageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataStorageType) Descriptor() protoreflect.EnumDescriptor {
	return file_s3_service_proto_enumTypes[8].Descriptor()
}

func (DataStorageType) Type() protoreflect.EnumType {
	return &file_s3_service_proto_enumTypes[8]
}

func (x DataStorageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataStorageType.Descriptor instead.
func (DataStorageType) EnumDescriptor() ([]byte, []int) {
	return file_s3_service_proto_rawDescGZIP(), []int{8}
}

type S3Storage_S3Provider int32

const (
	S3Storage_NONE_S3Provider S3Storage_S3Provider = 0
	S3Storage_AWS             S3Storage_S3Provider = 1
	S3Storage_AWSLocal        S3Storage_S3Provider = 2
	S3Storage_MINIO           S3Storage_S3Provider = 3
	S3Storage_OTHERS          S3Storage_S3Provider = 4
)

// Enum value maps for S3Storage_S3Provider.
var (
	S3Storage_S3Provider_name = map[int32]string{
		0: "NONE_S3Provider",
		1: "AWS",
		2: "AWSLocal",
		3: "MINIO",
		4: "OTHERS",
	}
	S3Storage_S3Provider_value = map[string]int32{
		"NONE_S3Provider": 0,
		"AWS":             1,
		"AWSLocal":        2,
		"MINIO":           3,
		"OTHERS":          4,
	}
)

func (x S3Storage_S3Provider) Enum() *S3Storage_S3Provider {
	p := new(S3Storage_S3Provider)
	*p = x
	return p
}

func (x S3Storage_S3Provider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (S3Storage_S3Provider) Descriptor() protoreflect.EnumDescriptor {
	return file_s3_service_proto_enumTypes[9].Descriptor()
}

func (S3Storage_S3Provider) Type() protoreflect.EnumType {
	return &file_s3_service_proto_enumTypes[9]
}

func (x S3Storage_S3Provider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use S3Storage_S3Provider.Descriptor instead.
func (S3Storage_S3Provider) EnumDescriptor() ([]byte, []int) {
	return file_s3_service_proto_rawDescGZIP(), []int{23, 0}
}

// Error  global error object for api'sresponse
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message          string           `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	ErrorRetryStatus ErrorRetryStatus `protobuf:"varint,2,opt,name=error_retry_status,json=errorRetryStatus,proto3,enum=s3_service.ErrorRetryStatus" json:"error_retry_status,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s3_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_s3_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_s3_service_proto_rawDescGZIP(), []int{0}
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Error) GetErrorRetryStatus() ErrorRetryStatus {
	if x != nil {
		return x.ErrorRetryStatus
	}
	return ErrorRetryStatus_NONE
}

type FilterKeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComparisonOperator ComparisonOperator `protobuf:"varint,2,opt,name=comparison_operator,json=comparisonOperator,proto3,enum=s3_service.ComparisonOperator" json:"comparison_operator,omitempty"`
}

func (x *FilterKeyValue) Reset() {
	*x = FilterKeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s3_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterKeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterKeyValue) ProtoMessage() {}

func (x *FilterKeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_s3_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterKeyValue.ProtoReflect.Descriptor instead.
func (*FilterKeyValue) Descriptor() ([]byte, []int) {
	return file_s3_service_proto_rawDescGZIP(), []int{1}
}

func (x *FilterKeyValue) GetComparisonOperator() ComparisonOperator {
	if x != nil {
		return x.ComparisonOperator
	}
	return ComparisonOperator_COMPARISON_UNKNOWN
}

type FilterKeyValueSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags            *Tags           `protobuf:"bytes,1,opt,name=tags,proto3" json:"tags,omitempty"`
	FilterFields    *FilterKeyValue `protobuf:"bytes,2,opt,name=filter_fields,json=filterFields,proto3" json:"filter_fields,omitempty"`
	LogicalOperator LogicalOperator `protobuf:"varint,3,opt,name=logical_operator,json=logicalOperator,proto3,enum=s3_service.LogicalOperator" json:"logical_operator,omitempty"`
	SortOperator    SortOperator    `protobuf:"varint,4,opt,name=sort_operator,json=sortOperator,proto3,enum=s3_service.SortOperator" json:"sort_operator,omitempty"`
}

func (x *FilterKeyValueSet) Reset() {
	*x = FilterKeyValueSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s3_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterKeyValueSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterKeyValueSet) ProtoMessage() {}

func (x *FilterKeyValueSet) ProtoReflect() protoreflect.Message {
	mi := &file_s3_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterKeyValueSet.ProtoReflect.Descriptor instead.
func (*FilterKeyValueSet) Descriptor() ([]byte, []int) {
	return file_s3_service_proto_rawDescGZIP(), []int{2}
}

func (x *FilterKeyValueSet) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *FilterKeyValueSet) GetFilterFields() *FilterKeyValue {
	if x != nil {
		return x.FilterFields
	}
	return nil
}

func (x *FilterKeyValueSet) GetLogicalOperator() LogicalOperator {
	if x != nil {
		return x.LogicalOperator
	}
	return LogicalOperator_AND
}

func (x *FilterKeyValueSet) GetSortOperator() SortOperator {
	if x != nil {
		return x.SortOperator
	}
	return SortOperator_DEFAULT
}

type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Page token to echo back to get next page, is empty or page token is empty,
	// then there is no more results
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// page_size
	PageSize uint32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s3_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_s3_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_s3_service_proto_rawDescGZIP(), []int{3}
}

func (x *Pagination) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *Pagination) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type QueryOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters    *FilterKeyValueSet `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
	Pagination *Pagination        `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryOptions) Reset() {
	*x = QueryOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s3_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOptions) ProtoMessage() {}

func (x *QueryOptions) ProtoReflect() protoreflect.Message {
	mi := &file_s3_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOptions.ProtoReflect.Descriptor instead.
func (*QueryOptions) Descriptor() ([]byte, []int) {
	return file_s3_service_proto_rawDescGZIP(), []int{4}
}

func (x *QueryOptions) GetFilters() *FilterKeyValueSet {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *QueryOptions) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestResult RequestResult `protobuf:"varint,1,opt,name=request_result,json=requestResult,proto3,enum=s3_service.RequestResult" json:"request_result,omitempty"`
	// Message is a textual description of reason for rejection, and can be safely passed on to operator through logs
	// or UI.
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s3_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_s3_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_s3_service_proto_rawDescGZIP(), []int{5}
}

func (x *Result) GetRequestResult() RequestResult {
	if x != nil {
		return x.RequestResult
	}
	return RequestResult_UNKNOWN_RESULT
}

func (x *Result) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type FileChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *FileChunk) Reset() {
	*x = FileChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s3_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileChunk) ProtoMessage() {}

func (x *FileChunk) ProtoReflect() protoreflect.Message {
	mi := &file_s3_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileChunk.ProtoReflect.Descriptor instead.
func (*FileChunk) Descriptor() ([]byte, []int) {
	return file_s3_service_proto_rawDescGZIP(), []int{6}
}

func (x *FileChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// CreateOrUpdateBlobRequest - Create or Update a blob in remote storage
type UploadPatientImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PatientImage *PatientImage `protobuf:"bytes,1,opt,name=patient_image,json=patientImage,proto3" json:"patient_image,omitempty"`
	Tags         *Tags         `protobuf:"bytes,2,opt,name=tags,proto3" json:"tags,omitempty"`
	FilePath     string        `protobuf:"bytes,3,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
}

func (x *UploadPatientImageRequest) Reset() {
	*x = UploadPatientImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s3_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadPatientImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadPatientImageRequest) ProtoMessage() {}

func (x *UploadPatientImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_s3_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadPatientImageRequest.ProtoReflect.Descriptor instead.
func (*UploadPatientImageRequest) Descriptor() ([]byte, []int) {
	return file_s3_service_proto_rawDescGZIP(), []int{7}
}

func (x *UploadPatientImageRequest) GetPatientImage() *PatientImage {
	if x != nil {
		return x.PatientImage
	}
	return nil
}

func (x *UploadPatientImageRequest) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UploadPatientImageRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

// CreateOrUpdateBlobResponse Async job id that needs to tracked for success or failure
type UploadPatientImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Result `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *UploadPatientImageResponse) Reset() {
	*x = UploadPatientImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s3_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadPatientImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadPatientImageResponse) ProtoMessage() {}

func (x *UploadPatientImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_s3_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadPatientImageResponse.ProtoReflect.Descriptor instead.
func (*UploadPatientImageResponse) Descriptor() ([]byte, []int) {
	return file_s3_service_proto_rawDescGZIP(), []int{8}
}

func (x *UploadPatientImageResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ImageTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image *Image `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Tags  *Tags  `protobuf:"bytes,2,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *ImageTag) Reset() {
	*x = ImageTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s3_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageTag) ProtoMessage() {}

func (x *ImageTag) ProtoReflect() protoreflect.Message {
	mi := &file_s3_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageTag.ProtoReflect.Descriptor instead.
func (*ImageTag) Descriptor() ([]byte, []int) {
	return file_s3_service_proto_rawDescGZIP(), []int{9}
}

func (x *ImageTag) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *ImageTag) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Retrieve a Blob  to given shared storage path
type DownloadPatientImageListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Patient *Patient `protobuf:"bytes,1,opt,name=patient,proto3" json:"patient,omitempty"`
	Tags    *Tags    `protobuf:"bytes,2,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *DownloadPatientImageListRequest) Reset() {
	*x = DownloadPatientImageListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s3_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadPatientImageListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadPatientImageListRequest) ProtoMessage() {}

func (x *DownloadPatientImageListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_s3_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadPatientImageListRequest.ProtoReflect.Descriptor instead.
func (*DownloadPatientImageListRequest) Descriptor() ([]byte, []int) {
	return file_s3_service_proto_rawDescGZIP(), []int{10}
}

func (x *DownloadPatientImageListRequest) GetPatient() *Patient {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *DownloadPatientImageListRequest) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

type PatientImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PatientId string   `protobuf:"bytes,1,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
	Image     *ImageUI `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *PatientImage) Reset() {
	*x = PatientImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s3_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientImage) ProtoMessage() {}

func (x *PatientImage) ProtoReflect() protoreflect.Message {
	mi := &file_s3_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientImage.ProtoReflect.Descriptor instead.
func (*PatientImage) Descriptor() ([]byte, []int) {
	return file_s3_service_proto_rawDescGZIP(), []int{11}
}

func (x *PatientImage) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

func (x *PatientImage) GetImage() *ImageUI {
	if x != nil {
		return x.Image
	}
	return nil
}

// RetrievePatientImageRequest - Search the blobs stored by tags
type ListPatientImagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Patient     *Patient      `protobuf:"bytes,1,opt,name=patient,proto3" json:"patient,omitempty"`
	QueryOption *QueryOptions `protobuf:"bytes,2,opt,name=query_option,json=queryOption,proto3" json:"query_option,omitempty"`
}

func (x *ListPatientImagesRequest) Reset() {
	*x = ListPatientImagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s3_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPatientImagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPatientImagesRequest) ProtoMessage() {}

func (x *ListPatientImagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_s3_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPatientImagesRequest.ProtoReflect.Descriptor instead.
func (*ListPatientImagesRequest) Descriptor() ([]byte, []int) {
	return file_s3_service_proto_rawDescGZIP(), []int{12}
}

func (x *ListPatientImagesRequest) GetPatient() *Patient {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *ListPatientImagesRequest) GetQueryOption() *QueryOptions {
	if x != nil {
		return x.QueryOption
	}
	return nil
}

// RetrievePatientImageRequest - Download a single image of a patient
type RetrievePatientImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Patient *Patient `protobuf:"bytes,1,opt,name=patient,proto3" json:"patient,omitempty"`
	Image   *Image   `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *RetrievePatientImageRequest) Reset() {
	*x = RetrievePatientImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s3_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrievePatientImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrievePatientImageRequest) ProtoMessage() {}

func (x *RetrievePatientImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_s3_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrievePatientImageRequest.ProtoReflect.Descriptor instead.
func (*RetrievePatientImageRequest) Descriptor() ([]byte, []int) {
	return file_s3_service_proto_rawDescGZIP(), []int{13}
}

func (x *RetrievePatientImageRequest) GetPatient() *Patient {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *RetrievePatientImageRequest) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

// RetrievePatientImageRequest - Download a single image of a patient
type RetrievePatientImageRequestByTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Patient *Patient `protobuf:"bytes,1,opt,name=patient,proto3" json:"patient,omitempty"`
	Image   *Image   `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Tags    *Tags    `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *RetrievePatientImageRequestByTags) Reset() {
	*x = RetrievePatientImageRequestByTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s3_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrievePatientImageRequestByTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrievePatientImageRequestByTags) ProtoMessage() {}

func (x *RetrievePatientImageRequestByTags) ProtoReflect() protoreflect.Message {
	mi := &file_s3_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrievePatientImageRequestByTags.ProtoReflect.Descriptor instead.
func (*RetrievePatientImageRequestByTags) Descriptor() ([]byte, []int) {
	return file_s3_service_proto_rawDescGZIP(), []int{14}
}

func (x *RetrievePatientImageRequestByTags) GetPatient() *Patient {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *RetrievePatientImageRequestByTags) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *RetrievePatientImageRequestByTags) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

// RetrievePatientImageRequest - Download a single image of a patient
type DeletePatientImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Patient *Patient `protobuf:"bytes,1,opt,name=patient,proto3" json:"patient,omitempty"`
	Image   *Image   `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Tags    *Tags    `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *DeletePatientImageRequest) Reset() {
	*x = DeletePatientImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s3_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePatientImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePatientImageRequest) ProtoMessage() {}

func (x *DeletePatientImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_s3_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePatientImageRequest.ProtoReflect.Descriptor instead.
func (*DeletePatientImageRequest) Descriptor() ([]byte, []int) {
	return file_s3_service_proto_rawDescGZIP(), []int{15}
}

func (x *DeletePatientImageRequest) GetPatient() *Patient {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *DeletePatientImageRequest) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *DeletePatientImageRequest) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

// SearchPatientImageResponse - Search response matching catalog attributes
type ListPatientImagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Patient *Patient `protobuf:"bytes,1,opt,name=patient,proto3" json:"patient,omitempty"`
	Images  []*Image `protobuf:"bytes,2,rep,name=images,proto3" json:"images,omitempty"`
	Result  *Result  `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ListPatientImagesResponse) Reset() {
	*x = ListPatientImagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s3_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPatientImagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPatientImagesResponse) ProtoMessage() {}

func (x *ListPatientImagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_s3_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPatientImagesResponse.ProtoReflect.Descriptor instead.
func (*ListPatientImagesResponse) Descriptor() ([]byte, []int) {
	return file_s3_service_proto_rawDescGZIP(), []int{16}
}

func (x *ListPatientImagesResponse) GetPatient() *Patient {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *ListPatientImagesResponse) GetImages() []*Image {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *ListPatientImagesResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// ideally should be in a different proto
type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
	Name        string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Description string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Tags        []string               `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	BucketPath  string                 `protobuf:"bytes,1,opt,name=bucket_path,json=bucketPath,proto3" json:"bucket_path,omitempty"`
	Url         string                 `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	UploadTime  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=upload_time,json=uploadTime,proto3" json:"upload_time,omitempty"` // Time when the image was uploaded
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s3_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_s3_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_s3_service_proto_rawDescGZIP(), []int{17}
}

func (x *Image) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Image) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Image) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Image) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Image) GetBucketPath() string {
	if x != nil {
		return x.BucketPath
	}
	return ""
}

func (x *Image) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Image) GetUploadTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UploadTime
	}
	return nil
}

type ImageUI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Tags        []string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *ImageUI) Reset() {
	*x = ImageUI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s3_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageUI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageUI) ProtoMessage() {}

func (x *ImageUI) ProtoReflect() protoreflect.Message {
	mi := &file_s3_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageUI.ProtoReflect.Descriptor instead.
func (*ImageUI) Descriptor() ([]byte, []int) {
	return file_s3_service_proto_rawDescGZIP(), []int{18}
}

func (x *ImageUI) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ImageUI) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ImageUI) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag []string `protobuf:"bytes,1,rep,name=tag,proto3" json:"tag,omitempty"`
}

func (x *Tags) Reset() {
	*x = Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s3_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tags) ProtoMessage() {}

func (x *Tags) ProtoReflect() protoreflect.Message {
	mi := &file_s3_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tags.ProtoReflect.Descriptor instead.
func (*Tags) Descriptor() ([]byte, []int) {
	return file_s3_service_proto_rawDescGZIP(), []int{19}
}

func (x *Tags) GetTag() []string {
	if x != nil {
		return x.Tag
	}
	return nil
}

type Patient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	UserName string `protobuf:"bytes,3,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *Patient) Reset() {
	*x = Patient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s3_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Patient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Patient) ProtoMessage() {}

func (x *Patient) ProtoReflect() protoreflect.Message {
	mi := &file_s3_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Patient.ProtoReflect.Descriptor instead.
func (*Patient) Descriptor() ([]byte, []int) {
	return file_s3_service_proto_rawDescGZIP(), []int{20}
}

func (x *Patient) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Patient) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Patient) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type PatientUI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PatientUI) Reset() {
	*x = PatientUI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s3_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientUI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientUI) ProtoMessage() {}

func (x *PatientUI) ProtoReflect() protoreflect.Message {
	mi := &file_s3_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientUI.ProtoReflect.Descriptor instead.
func (*PatientUI) Descriptor() ([]byte, []int) {
	return file_s3_service_proto_rawDescGZIP(), []int{21}
}

func (x *PatientUI) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type OperationsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Result *Result `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *OperationsResult) Reset() {
	*x = OperationsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s3_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationsResult) ProtoMessage() {}

func (x *OperationsResult) ProtoReflect() protoreflect.Message {
	mi := &file_s3_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationsResult.ProtoReflect.Descriptor instead.
func (*OperationsResult) Descriptor() ([]byte, []int) {
	return file_s3_service_proto_rawDescGZIP(), []int{22}
}

func (x *OperationsResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OperationsResult) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// not used
type S3Storage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Provider
	S3Provider S3Storage_S3Provider `protobuf:"varint,1,opt,name=s3_provider,json=s3Provider,proto3,enum=s3_service.S3Storage_S3Provider" json:"s3_provider,omitempty"`
	// Provider Class
	StorageClass string `protobuf:"bytes,2,opt,name=storage_class,json=storageClass,proto3" json:"storage_class,omitempty"`
	// URL of provider
	EndpointUrl string `protobuf:"bytes,3,opt,name=endpoint_url,json=endpointUrl,proto3" json:"endpoint_url,omitempty"`
	// Bucket Name
	Bucket string `protobuf:"bytes,5,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// Region Name
	Region string `protobuf:"bytes,6,opt,name=region,proto3" json:"region,omitempty"`
	// Advanced Properties
	Advanced []*Advanced `protobuf:"bytes,7,rep,name=advanced,proto3" json:"advanced,omitempty"`
}

func (x *S3Storage) Reset() {
	*x = S3Storage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s3_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3Storage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3Storage) ProtoMessage() {}

func (x *S3Storage) ProtoReflect() protoreflect.Message {
	mi := &file_s3_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3Storage.ProtoReflect.Descriptor instead.
func (*S3Storage) Descriptor() ([]byte, []int) {
	return file_s3_service_proto_rawDescGZIP(), []int{23}
}

func (x *S3Storage) GetS3Provider() S3Storage_S3Provider {
	if x != nil {
		return x.S3Provider
	}
	return S3Storage_NONE_S3Provider
}

func (x *S3Storage) GetStorageClass() string {
	if x != nil {
		return x.StorageClass
	}
	return ""
}

func (x *S3Storage) GetEndpointUrl() string {
	if x != nil {
		return x.EndpointUrl
	}
	return ""
}

func (x *S3Storage) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *S3Storage) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *S3Storage) GetAdvanced() []*Advanced {
	if x != nil {
		return x.Advanced
	}
	return nil
}

// not used
type Advanced struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Value of prop
	//
	// Types that are assignable to Value:
	//
	//	*Advanced_StringValue
	//	*Advanced_Int64Value
	//	*Advanced_Uint64Value
	//	*Advanced_BooleanValue
	Value isAdvanced_Value `protobuf_oneof:"value"`
}

func (x *Advanced) Reset() {
	*x = Advanced{}
	if protoimpl.UnsafeEnabled {
		mi := &file_s3_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Advanced) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Advanced) ProtoMessage() {}

func (x *Advanced) ProtoReflect() protoreflect.Message {
	mi := &file_s3_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Advanced.ProtoReflect.Descriptor instead.
func (*Advanced) Descriptor() ([]byte, []int) {
	return file_s3_service_proto_rawDescGZIP(), []int{24}
}

func (x *Advanced) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (m *Advanced) GetValue() isAdvanced_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Advanced) GetStringValue() string {
	if x, ok := x.GetValue().(*Advanced_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *Advanced) GetInt64Value() int64 {
	if x, ok := x.GetValue().(*Advanced_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (x *Advanced) GetUint64Value() uint64 {
	if x, ok := x.GetValue().(*Advanced_Uint64Value); ok {
		return x.Uint64Value
	}
	return 0
}

func (x *Advanced) GetBooleanValue() bool {
	if x, ok := x.GetValue().(*Advanced_BooleanValue); ok {
		return x.BooleanValue
	}
	return false
}

type isAdvanced_Value interface {
	isAdvanced_Value()
}

type Advanced_StringValue struct {
	// Value of prop
	StringValue string `protobuf:"bytes,2,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type Advanced_Int64Value struct {
	// Value of prop
	Int64Value int64 `protobuf:"varint,3,opt,name=int64_value,json=int64Value,proto3,oneof"`
}

type Advanced_Uint64Value struct {
	// Value of prop
	Uint64Value uint64 `protobuf:"varint,4,opt,name=uint64_value,json=uint64Value,proto3,oneof"`
}

type Advanced_BooleanValue struct {
	// Value of prop
	BooleanValue bool `protobuf:"varint,5,opt,name=boolean_value,json=booleanValue,proto3,oneof"`
}

func (*Advanced_StringValue) isAdvanced_Value() {}

func (*Advanced_Int64Value) isAdvanced_Value() {}

func (*Advanced_Uint64Value) isAdvanced_Value() {}

func (*Advanced_BooleanValue) isAdvanced_Value() {}

var File_s3_service_proto protoreflect.FileDescriptor

var file_s3_service_proto_rawDesc = []byte{
	0x0a, 0x10, 0x73, 0x33, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x73, 0x33, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6d, 0x0a,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x4a, 0x0a, 0x12, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73,
	0x33, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x61, 0x0a, 0x0e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4f,
	0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x33,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69,
	0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x12, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22,
	0x81, 0x02, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x33, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x33, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x10,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x33, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x33,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x22, 0x48, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x7f, 0x0a,
	0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x73, 0x33, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x33, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x73,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x73, 0x33, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x33, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x1f, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x9d, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x33, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x73, 0x33, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x67,
	0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x22, 0x48, 0x0a, 0x1a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x33, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x59,
	0x0a, 0x08, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x67, 0x12, 0x27, 0x0a, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x33, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x73, 0x33, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54,
	0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x76, 0x0a, 0x1f, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x07,
	0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x33, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x33, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x22, 0x58, 0x0a, 0x0c, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x29, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x73, 0x33, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x49, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x18,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x33, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07,
	0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x33, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x75, 0x0a, 0x1b, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x33, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x73, 0x33, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x21,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x2d, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x33, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x27, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x73, 0x33, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x33, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22,
	0x99, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a,
	0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x33, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x33,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x33, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x19,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x33, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x33, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x33, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0xd1, 0x01, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x53, 0x0a, 0x07, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x49, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x18, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x74,
	0x61, 0x67, 0x22, 0x4a, 0x0a, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x1b,
	0x0a, 0x09, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x49, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x10, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x33, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0xc9, 0x02, 0x0a, 0x09, 0x53, 0x33, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a,
	0x0b, 0x73, 0x33, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73, 0x33, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x33, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x33, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x0a, 0x73, 0x33, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x08, 0x61, 0x64, 0x76, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x33, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64,
	0x52, 0x08, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x22, 0x4f, 0x0a, 0x0a, 0x53, 0x33,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x4e, 0x45,
	0x5f, 0x53, 0x33, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x57, 0x53, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x57, 0x53, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x49, 0x4e, 0x49, 0x4f, 0x10, 0x03, 0x12,
	0x0a, 0x0a, 0x06, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x53, 0x10, 0x04, 0x22, 0xb9, 0x01, 0x0a, 0x08,
	0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x21, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x3f, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43,
	0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x49, 0x0a, 0x10, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x54, 0x52, 0x59, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x59, 0x10, 0x02, 0x12,
	0x12, 0x0a, 0x0e, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x54, 0x52,
	0x59, 0x10, 0x03, 0x2a, 0xa8, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73,
	0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f,
	0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x49, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45,
	0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x45, 0x53,
	0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10,
	0x05, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41,
	0x4e, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54,
	0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x07, 0x2a, 0x22,
	0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x52,
	0x10, 0x01, 0x2a, 0x42, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x4f, 0x57, 0x4e,
	0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x2a, 0x3a, 0x0a, 0x0c, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x02, 0x2a, 0x2f, 0x0a, 0x07, 0x4a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x0c, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x49, 0x4d, 0x41, 0x47,
	0x45, 0x10, 0x01, 0x2a, 0x43, 0x0a, 0x09, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45,
	0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x53, 0x33, 0x10, 0x01, 0x12,
	0x07, 0x0a, 0x03, 0x47, 0x43, 0x53, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x5a, 0x55, 0x52,
	0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x42, 0x10, 0x03, 0x2a, 0x30, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4e,
	0x4f, 0x4e, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x57, 0x53, 0x10, 0x01, 0x32, 0xda, 0x06, 0x0a, 0x13, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x25, 0x2e, 0x73, 0x33, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x73, 0x33, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e,
	0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x84,
	0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x73, 0x33, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x33, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x81, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x27, 0x2e, 0x73, 0x33, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x12, 0x2e, 0x73, 0x33, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x22, 0x29,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x7b, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x7b,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x69, 0x64, 0x7d, 0x12, 0x93, 0x01, 0x0a, 0x16, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x54, 0x61, 0x67, 0x73, 0x12, 0x2d, 0x2e, 0x73, 0x33, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x54,
	0x61, 0x67, 0x73, 0x1a, 0x12, 0x2e, 0x73, 0x33, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x32,
	0x2e, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x7b, 0x70, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f,
	0x7b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x82, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x25, 0x2e, 0x73, 0x33, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e,
	0x73, 0x33, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x2a, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x7b, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x7b, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x2e, 0x69, 0x64, 0x7d, 0x12, 0x90, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x42, 0x79, 0x54, 0x61, 0x67, 0x12, 0x2d, 0x2e, 0x73,
	0x33, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x54, 0x61, 0x67, 0x73, 0x1a, 0x12, 0x2e, 0x73, 0x33,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x22, 0x2e, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x2f, 0x7b, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x69, 0x64,
	0x7d, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x7b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x69,
	0x64, 0x7d, 0x2f, 0x74, 0x61, 0x67, 0x73, 0x42, 0x1f, 0x5a, 0x1d, 0x77, 0x77, 0x77, 0x2e, 0x72,
	0x76, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x33,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_s3_service_proto_rawDescOnce sync.Once
	file_s3_service_proto_rawDescData = file_s3_service_proto_rawDesc
)

func file_s3_service_proto_rawDescGZIP() []byte {
	file_s3_service_proto_rawDescOnce.Do(func() {
		file_s3_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_s3_service_proto_rawDescData)
	})
	return file_s3_service_proto_rawDescData
}

var file_s3_service_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_s3_service_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_s3_service_proto_goTypes = []interface{}{
	(RequestResult)(0),                        // 0: s3_service.RequestResult
	(ErrorRetryStatus)(0),                     // 1: s3_service.ErrorRetryStatus
	(ComparisonOperator)(0),                   // 2: s3_service.ComparisonOperator
	(LogicalOperator)(0),                      // 3: s3_service.LogicalOperator
	(PresignedOperation)(0),                   // 4: s3_service.PresignedOperation
	(SortOperator)(0),                         // 5: s3_service.SortOperator
	(JobType)(0),                              // 6: s3_service.JobType
	(DATASTORE)(0),                            // 7: s3_service.DATASTORE
	(DataStorageType)(0),                      // 8: s3_service.DataStorageType
	(S3Storage_S3Provider)(0),                 // 9: s3_service.S3Storage.S3Provider
	(*Error)(nil),                             // 10: s3_service.Error
	(*FilterKeyValue)(nil),                    // 11: s3_service.FilterKeyValue
	(*FilterKeyValueSet)(nil),                 // 12: s3_service.FilterKeyValueSet
	(*Pagination)(nil),                        // 13: s3_service.Pagination
	(*QueryOptions)(nil),                      // 14: s3_service.QueryOptions
	(*Result)(nil),                            // 15: s3_service.Result
	(*FileChunk)(nil),                         // 16: s3_service.FileChunk
	(*UploadPatientImageRequest)(nil),         // 17: s3_service.UploadPatientImageRequest
	(*UploadPatientImageResponse)(nil),        // 18: s3_service.UploadPatientImageResponse
	(*ImageTag)(nil),                          // 19: s3_service.ImageTag
	(*DownloadPatientImageListRequest)(nil),   // 20: s3_service.DownloadPatientImageListRequest
	(*PatientImage)(nil),                      // 21: s3_service.PatientImage
	(*ListPatientImagesRequest)(nil),          // 22: s3_service.ListPatientImagesRequest
	(*RetrievePatientImageRequest)(nil),       // 23: s3_service.RetrievePatientImageRequest
	(*RetrievePatientImageRequestByTags)(nil), // 24: s3_service.RetrievePatientImageRequestByTags
	(*DeletePatientImageRequest)(nil),         // 25: s3_service.DeletePatientImageRequest
	(*ListPatientImagesResponse)(nil),         // 26: s3_service.ListPatientImagesResponse
	(*Image)(nil),                             // 27: s3_service.Image
	(*ImageUI)(nil),                           // 28: s3_service.ImageUI
	(*Tags)(nil),                              // 29: s3_service.Tags
	(*Patient)(nil),                           // 30: s3_service.Patient
	(*PatientUI)(nil),                         // 31: s3_service.PatientUI
	(*OperationsResult)(nil),                  // 32: s3_service.OperationsResult
	(*S3Storage)(nil),                         // 33: s3_service.S3Storage
	(*Advanced)(nil),                          // 34: s3_service.Advanced
	(*timestamppb.Timestamp)(nil),             // 35: google.protobuf.Timestamp
}
var file_s3_service_proto_depIdxs = []int32{
	1,  // 0: s3_service.Error.error_retry_status:type_name -> s3_service.ErrorRetryStatus
	2,  // 1: s3_service.FilterKeyValue.comparison_operator:type_name -> s3_service.ComparisonOperator
	29, // 2: s3_service.FilterKeyValueSet.tags:type_name -> s3_service.Tags
	11, // 3: s3_service.FilterKeyValueSet.filter_fields:type_name -> s3_service.FilterKeyValue
	3,  // 4: s3_service.FilterKeyValueSet.logical_operator:type_name -> s3_service.LogicalOperator
	5,  // 5: s3_service.FilterKeyValueSet.sort_operator:type_name -> s3_service.SortOperator
	12, // 6: s3_service.QueryOptions.filters:type_name -> s3_service.FilterKeyValueSet
	13, // 7: s3_service.QueryOptions.pagination:type_name -> s3_service.Pagination
	0,  // 8: s3_service.Result.request_result:type_name -> s3_service.RequestResult
	10, // 9: s3_service.Result.error:type_name -> s3_service.Error
	21, // 10: s3_service.UploadPatientImageRequest.patient_image:type_name -> s3_service.PatientImage
	29, // 11: s3_service.UploadPatientImageRequest.tags:type_name -> s3_service.Tags
	15, // 12: s3_service.UploadPatientImageResponse.result:type_name -> s3_service.Result
	27, // 13: s3_service.ImageTag.image:type_name -> s3_service.Image
	29, // 14: s3_service.ImageTag.tags:type_name -> s3_service.Tags
	30, // 15: s3_service.DownloadPatientImageListRequest.patient:type_name -> s3_service.Patient
	29, // 16: s3_service.DownloadPatientImageListRequest.tags:type_name -> s3_service.Tags
	28, // 17: s3_service.PatientImage.image:type_name -> s3_service.ImageUI
	30, // 18: s3_service.ListPatientImagesRequest.patient:type_name -> s3_service.Patient
	14, // 19: s3_service.ListPatientImagesRequest.query_option:type_name -> s3_service.QueryOptions
	30, // 20: s3_service.RetrievePatientImageRequest.patient:type_name -> s3_service.Patient
	27, // 21: s3_service.RetrievePatientImageRequest.image:type_name -> s3_service.Image
	30, // 22: s3_service.RetrievePatientImageRequestByTags.patient:type_name -> s3_service.Patient
	27, // 23: s3_service.RetrievePatientImageRequestByTags.image:type_name -> s3_service.Image
	29, // 24: s3_service.RetrievePatientImageRequestByTags.tags:type_name -> s3_service.Tags
	30, // 25: s3_service.DeletePatientImageRequest.patient:type_name -> s3_service.Patient
	27, // 26: s3_service.DeletePatientImageRequest.image:type_name -> s3_service.Image
	29, // 27: s3_service.DeletePatientImageRequest.tags:type_name -> s3_service.Tags
	30, // 28: s3_service.ListPatientImagesResponse.patient:type_name -> s3_service.Patient
	27, // 29: s3_service.ListPatientImagesResponse.images:type_name -> s3_service.Image
	15, // 30: s3_service.ListPatientImagesResponse.result:type_name -> s3_service.Result
	35, // 31: s3_service.Image.upload_time:type_name -> google.protobuf.Timestamp
	15, // 32: s3_service.OperationsResult.result:type_name -> s3_service.Result
	9,  // 33: s3_service.S3Storage.s3_provider:type_name -> s3_service.S3Storage.S3Provider
	34, // 34: s3_service.S3Storage.advanced:type_name -> s3_service.Advanced
	17, // 35: s3_service.PatientImageService.UploadPatientImage:input_type -> s3_service.UploadPatientImageRequest
	22, // 36: s3_service.PatientImageService.ListPatientImages:input_type -> s3_service.ListPatientImagesRequest
	23, // 37: s3_service.PatientImageService.GetPatientImage:input_type -> s3_service.RetrievePatientImageRequest
	24, // 38: s3_service.PatientImageService.UpdatePatientImageTags:input_type -> s3_service.RetrievePatientImageRequestByTags
	25, // 39: s3_service.PatientImageService.DeletePatientImage:input_type -> s3_service.DeletePatientImageRequest
	24, // 40: s3_service.PatientImageService.RetrieveImagesByTag:input_type -> s3_service.RetrievePatientImageRequestByTags
	18, // 41: s3_service.PatientImageService.UploadPatientImage:output_type -> s3_service.UploadPatientImageResponse
	26, // 42: s3_service.PatientImageService.ListPatientImages:output_type -> s3_service.ListPatientImagesResponse
	15, // 43: s3_service.PatientImageService.GetPatientImage:output_type -> s3_service.Result
	15, // 44: s3_service.PatientImageService.UpdatePatientImageTags:output_type -> s3_service.Result
	15, // 45: s3_service.PatientImageService.DeletePatientImage:output_type -> s3_service.Result
	15, // 46: s3_service.PatientImageService.RetrieveImagesByTag:output_type -> s3_service.Result
	41, // [41:47] is the sub-list for method output_type
	35, // [35:41] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_s3_service_proto_init() }
func file_s3_service_proto_init() {
	if File_s3_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_s3_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s3_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterKeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s3_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterKeyValueSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s3_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s3_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s3_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s3_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s3_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadPatientImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s3_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadPatientImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s3_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s3_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadPatientImageListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s3_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s3_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPatientImagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s3_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrievePatientImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s3_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrievePatientImageRequestByTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s3_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePatientImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s3_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPatientImagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s3_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s3_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageUI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s3_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s3_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Patient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s3_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientUI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s3_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s3_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3Storage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_s3_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Advanced); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_s3_service_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*Advanced_StringValue)(nil),
		(*Advanced_Int64Value)(nil),
		(*Advanced_Uint64Value)(nil),
		(*Advanced_BooleanValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_s3_service_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_s3_service_proto_goTypes,
		DependencyIndexes: file_s3_service_proto_depIdxs,
		EnumInfos:         file_s3_service_proto_enumTypes,
		MessageInfos:      file_s3_service_proto_msgTypes,
	}.Build()
	File_s3_service_proto = out.File
	file_s3_service_proto_rawDesc = nil
	file_s3_service_proto_goTypes = nil
	file_s3_service_proto_depIdxs = nil
}
