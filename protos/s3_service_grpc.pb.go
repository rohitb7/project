// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: s3_service.proto

package s3_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PatientImageService_UploadPatientImage_FullMethodName     = "/s3_service.PatientImageService/UploadPatientImage"
	PatientImageService_ListPatientImages_FullMethodName      = "/s3_service.PatientImageService/ListPatientImages"
	PatientImageService_GetPatientImage_FullMethodName        = "/s3_service.PatientImageService/GetPatientImage"
	PatientImageService_UpdatePatientImageTags_FullMethodName = "/s3_service.PatientImageService/UpdatePatientImageTags"
	PatientImageService_DeletePatientImage_FullMethodName     = "/s3_service.PatientImageService/DeletePatientImage"
	PatientImageService_RetrieveImagesByTag_FullMethodName    = "/s3_service.PatientImageService/RetrieveImagesByTag"
)

// PatientImageServiceClient is the client API for PatientImageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PatientImageServiceClient interface {
	// UploadPatientImage Upload a image of patient
	UploadPatientImage(ctx context.Context, in *UploadPatientImageRequest, opts ...grpc.CallOption) (*UploadPatientImageResponse, error)
	// ListPatientImages Get request for patients and his list of images
	ListPatientImages(ctx context.Context, in *ListPatientImagesRequest, opts ...grpc.CallOption) (*ListPatientImagesResponse, error)
	// GetPatientImage Get a specific image for a patient
	// .This API is for future use and not implemented yet.
	GetPatientImage(ctx context.Context, in *RetrievePatientImageRequest, opts ...grpc.CallOption) (*Result, error)
	// UpdatePatientImageTags Update tags for a patient's image
	// .This API is for future use and not implemented yet.
	UpdatePatientImageTags(ctx context.Context, in *RetrievePatientImageRequestByTags, opts ...grpc.CallOption) (*Result, error)
	// DeletePatientImage Delete a patient's image
	// .This API is for future use and not implemented yet.
	DeletePatientImage(ctx context.Context, in *DeletePatientImageRequest, opts ...grpc.CallOption) (*Result, error)
	// RetrieveImagesByTag Retrieve images by tag
	// .This API is for future use and not implemented yet.
	RetrieveImagesByTag(ctx context.Context, in *RetrievePatientImageRequestByTags, opts ...grpc.CallOption) (*Result, error)
}

type patientImageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPatientImageServiceClient(cc grpc.ClientConnInterface) PatientImageServiceClient {
	return &patientImageServiceClient{cc}
}

func (c *patientImageServiceClient) UploadPatientImage(ctx context.Context, in *UploadPatientImageRequest, opts ...grpc.CallOption) (*UploadPatientImageResponse, error) {
	out := new(UploadPatientImageResponse)
	err := c.cc.Invoke(ctx, PatientImageService_UploadPatientImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientImageServiceClient) ListPatientImages(ctx context.Context, in *ListPatientImagesRequest, opts ...grpc.CallOption) (*ListPatientImagesResponse, error) {
	out := new(ListPatientImagesResponse)
	err := c.cc.Invoke(ctx, PatientImageService_ListPatientImages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientImageServiceClient) GetPatientImage(ctx context.Context, in *RetrievePatientImageRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, PatientImageService_GetPatientImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientImageServiceClient) UpdatePatientImageTags(ctx context.Context, in *RetrievePatientImageRequestByTags, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, PatientImageService_UpdatePatientImageTags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientImageServiceClient) DeletePatientImage(ctx context.Context, in *DeletePatientImageRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, PatientImageService_DeletePatientImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientImageServiceClient) RetrieveImagesByTag(ctx context.Context, in *RetrievePatientImageRequestByTags, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, PatientImageService_RetrieveImagesByTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PatientImageServiceServer is the server API for PatientImageService service.
// All implementations should embed UnimplementedPatientImageServiceServer
// for forward compatibility
type PatientImageServiceServer interface {
	// UploadPatientImage Upload a image of patient
	UploadPatientImage(context.Context, *UploadPatientImageRequest) (*UploadPatientImageResponse, error)
	// ListPatientImages Get request for patients and his list of images
	ListPatientImages(context.Context, *ListPatientImagesRequest) (*ListPatientImagesResponse, error)
	// GetPatientImage Get a specific image for a patient
	// .This API is for future use and not implemented yet.
	GetPatientImage(context.Context, *RetrievePatientImageRequest) (*Result, error)
	// UpdatePatientImageTags Update tags for a patient's image
	// .This API is for future use and not implemented yet.
	UpdatePatientImageTags(context.Context, *RetrievePatientImageRequestByTags) (*Result, error)
	// DeletePatientImage Delete a patient's image
	// .This API is for future use and not implemented yet.
	DeletePatientImage(context.Context, *DeletePatientImageRequest) (*Result, error)
	// RetrieveImagesByTag Retrieve images by tag
	// .This API is for future use and not implemented yet.
	RetrieveImagesByTag(context.Context, *RetrievePatientImageRequestByTags) (*Result, error)
}

// UnimplementedPatientImageServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPatientImageServiceServer struct {
}

func (UnimplementedPatientImageServiceServer) UploadPatientImage(context.Context, *UploadPatientImageRequest) (*UploadPatientImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPatientImage not implemented")
}
func (UnimplementedPatientImageServiceServer) ListPatientImages(context.Context, *ListPatientImagesRequest) (*ListPatientImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPatientImages not implemented")
}
func (UnimplementedPatientImageServiceServer) GetPatientImage(context.Context, *RetrievePatientImageRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatientImage not implemented")
}
func (UnimplementedPatientImageServiceServer) UpdatePatientImageTags(context.Context, *RetrievePatientImageRequestByTags) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePatientImageTags not implemented")
}
func (UnimplementedPatientImageServiceServer) DeletePatientImage(context.Context, *DeletePatientImageRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePatientImage not implemented")
}
func (UnimplementedPatientImageServiceServer) RetrieveImagesByTag(context.Context, *RetrievePatientImageRequestByTags) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveImagesByTag not implemented")
}

// UnsafePatientImageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PatientImageServiceServer will
// result in compilation errors.
type UnsafePatientImageServiceServer interface {
	mustEmbedUnimplementedPatientImageServiceServer()
}

func RegisterPatientImageServiceServer(s grpc.ServiceRegistrar, srv PatientImageServiceServer) {
	s.RegisterService(&PatientImageService_ServiceDesc, srv)
}

func _PatientImageService_UploadPatientImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadPatientImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientImageServiceServer).UploadPatientImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PatientImageService_UploadPatientImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientImageServiceServer).UploadPatientImage(ctx, req.(*UploadPatientImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientImageService_ListPatientImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPatientImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientImageServiceServer).ListPatientImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PatientImageService_ListPatientImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientImageServiceServer).ListPatientImages(ctx, req.(*ListPatientImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientImageService_GetPatientImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrievePatientImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientImageServiceServer).GetPatientImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PatientImageService_GetPatientImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientImageServiceServer).GetPatientImage(ctx, req.(*RetrievePatientImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientImageService_UpdatePatientImageTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrievePatientImageRequestByTags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientImageServiceServer).UpdatePatientImageTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PatientImageService_UpdatePatientImageTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientImageServiceServer).UpdatePatientImageTags(ctx, req.(*RetrievePatientImageRequestByTags))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientImageService_DeletePatientImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePatientImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientImageServiceServer).DeletePatientImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PatientImageService_DeletePatientImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientImageServiceServer).DeletePatientImage(ctx, req.(*DeletePatientImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientImageService_RetrieveImagesByTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrievePatientImageRequestByTags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientImageServiceServer).RetrieveImagesByTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PatientImageService_RetrieveImagesByTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientImageServiceServer).RetrieveImagesByTag(ctx, req.(*RetrievePatientImageRequestByTags))
	}
	return interceptor(ctx, in, info, handler)
}

// PatientImageService_ServiceDesc is the grpc.ServiceDesc for PatientImageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PatientImageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "s3_service.PatientImageService",
	HandlerType: (*PatientImageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadPatientImage",
			Handler:    _PatientImageService_UploadPatientImage_Handler,
		},
		{
			MethodName: "ListPatientImages",
			Handler:    _PatientImageService_ListPatientImages_Handler,
		},
		{
			MethodName: "GetPatientImage",
			Handler:    _PatientImageService_GetPatientImage_Handler,
		},
		{
			MethodName: "UpdatePatientImageTags",
			Handler:    _PatientImageService_UpdatePatientImageTags_Handler,
		},
		{
			MethodName: "DeletePatientImage",
			Handler:    _PatientImageService_DeletePatientImage_Handler,
		},
		{
			MethodName: "RetrieveImagesByTag",
			Handler:    _PatientImageService_RetrieveImagesByTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "s3_service.proto",
}
